service: chaining-step-functions

frameworkVersion: '3'

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs18.x
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: '*'

functions:
  calculate:
    handler: handler.calculate
    environment: ${file(env.json)}
  approval:
    handler: handler.approval
    environment: ${file(env.json)}
  finalize:
    handler: handler.finalize

stepFunctions:
  stateMachines:
    simple-maths:
      events:
        - http:
            path: /
            method: POST
      name: simple-maths
      definition:
        Comment: Demo for Function Chaining
        StartAt: IsInputValid

        States:
          IsInputValid:
            Type: Choice
            Choices:
              - Or:
                  - Variable: $.x
                    IsNumeric: false
                  - Variable: $.y
                    IsNumeric: false
                Next: DefaultResponse
            Default: Calculate

          Calculate:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
            Parameters:
              FunctionName:
                Ref: calculate
              Payload:
                'number.$': '$'
                'token.$': '$$.Task.Token'
            Next: Approval
            Retry:
              - ErrorEquals: [NumberIsTooBig]
                MaxAttempts: 0
              - ErrorEquals: [States.ALL]
                MaxAttempts: 2
            Catch:
              - ErrorEquals: [NumberIsTooBig]
                Next: DefaultResponse
              - ErrorEquals: [States.ALL]
                Next: DefaultResponse
            TimeoutSeconds: 60
            HeartbeatSeconds: 30

          Approval:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
            Parameters:
              FunctionName:
                Ref: approval
              Payload:
                'number.$': '$'
                'token.$': '$$.Task.Token'
            TimeoutSeconds: 600
            Next: Finalize
            Catch:
              - ErrorEquals: [States.ALL]
                Next: DefaultResponse

          Finalize:
            Type: Task
            Resource:
              Fn::GetAtt: [finalize, Arn]
            End: true

          DefaultResponse:
            Type: Pass
            Result: Error evaluating Task
            End: true
